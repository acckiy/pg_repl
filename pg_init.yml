---
- name: Prep servers
  hosts: db_servers
  become: yes
  tasks:
    - name: Install EPEL
      ansible.builtin.yum:
        name: epel-release
        state: present

    - name: Install PostreSQL remote repo
      ansible.builtin.yum:
        name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
        state: present

    - name: Install PostgreSQL and psycopg2(for community.postgresql ansible module)
      ansible.builtin.yum:
        name: 
          - postgresql15
          - postgresql15-server
          - postgresql15-contrib
          - python-psycopg2
        state: present
        update_cache: true

    - name: Open PostgreSQL port
      ansible.posix.firewalld:
        port: 5432/tcp
        immediate: true
        permanent: true
        state: enabled


- name: Prepare Master server
  hosts: master
  become: yes
  tasks:
    # Проверяем наличие конфига/БД на текущем сервере. Если он есть, то следующий шаг пропускаем.
    - name: Get stats of a file
      ansible.builtin.stat:
        path: /var/lib/pgsql/15/data/postgresql.conf
      register: pgc

    # Создаем базу с нуля. Можно будет заменить этот блок вытягиванием БД из резерва.
    - name: Init DB
      ansible.builtin.shell: |
        /usr/pgsql-15/bin/postgresql-15-setup initdb
      when: not pgc.stat.exists


    # Кладем конфиг. Если новый то хендлером перезапускаем в конце сервис
    - name: Copy postgresql.conf
      ansible.builtin.copy:
        src: postgresql.conf
        dest: /var/lib/pgsql/15/data/postgresql.conf
        owner: postgres
        group: postgres
        mode: '0600'
        force: true
      notify: Restart PostgreSQL

    # Запускаем сервис т.к. слоты и пользователь репликации добавляются уже на работающей БД
    - name: Start service PostgreSQL
      ansible.builtin.service:
        name: postgresql-15
        enabled: true
        state: started

    # Тут делал добавление пользователя методами ansible ,tp 
#    - name: Add replication role
#      become_user: postgres
#      ansible.builtin.shell: |
#        psql -c "CREATE ROLE repluser WITH REPLICATION LOGIN;"
#      register: result
#      failed_when: "'already exists' not in result.stderr and 'CREATE ROLE' not in result.stdout"

    # Добавляем пользователя с правами на репликацию и логин
    - name: add repluser
      become_user: postgres
      community.postgresql.postgresql_user:
        name: repluser
        role_attr_flags: REPLICATION,LOGIN

    # Создаем слот для репликации/бекапа
    - name: Create physical_one physical slot if doesn't exist
      become_user: postgres
      community.postgresql.postgresql_slot:
        slot_name: replislot
    
    # Добавляем хотсы с которых можно будет соединиться с БД. В Рамках теста метод выбрал trust. Стоит заменить на md5
    - name: Edit pg_hba.conf
      lineinfile:
        path: /var/lib/pgsql/15/data/pg_hba.conf
        line: "host   replication   repluser    {{ hostvars[item].ansible_host }}/32    trust"
      with_items: "{{ groups.db_servers }}"
      notify: Restart PostgreSQL

  handlers:
    - name: Restart PostgreSQL
      ansible.builtin.service:
        name: postgresql-15
        state: restarted

- name: Prep StandBy
  hosts: standby
  become: yes
  tasks:
    # Проверяю проводилась ли настройка сервера ранее. Если файл конфига есть, то БД уже настраивалась ранее
    - name: Check DB
      ansible.builtin.stat:
        path: /var/lib/pgsql/15/data/postgresql.conf
      register: pgc

    # C Master сервер получаем бекап кластера postregsql
    - name: Get backup DB
      become_user: postgres
      ansible.builtin.shell: "pg_basebackup -R -h {{ hostvars[item].ansible_host }} -U repluser -D /var/lib/pgsql/15/data -S replislot"
      when: not pgc.stat.exists
      with_items: "{{ groups.master }}"

    # Запускаем сервис
    - name: Start service PostgreSQL
      ansible.builtin.service:
        name: postgresql-15
        enabled: true
        state: started

          #  # Пока не используется. Добавил на всякий случай
          #  handlers:
          #    - name: Restart PostgreSQL
          #      ansible.builtin.service:
          #        name: postgresql-15
          #        state: restarted
